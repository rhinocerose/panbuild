% Options for packages loaded elsewhere
\PassOptionsToPackage{unicode}{hyperref}
\PassOptionsToPackage{hyphens}{url}

\documentclass[10pt,]{article}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%	FONT DEFINITIONS
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{lmodern}
\usepackage[dvipsnames]{xcolor}
\usepackage{setspace}
\setstretch{1.2}

\usepackage{amssymb,amsmath}
\usepackage{ifxetex,ifluatex}
\usepackage{fixltx2e} % provides \textsubscript

\ifnum 0\ifxetex 1\fi\ifluatex 1\fi=0 % if pdftex
	\usepackage[T1]{fontenc}
	\usepackage[utf8]{inputenc}
\else % if luatex or xelatex
\ifxetex  \usepackage{mathspec}
\else  \usepackage{fontspec}
\fi
\defaultfontfeatures{Ligatures=TeX,Scale=MatchLowercase}
\setmainfont[Ligatures = TeX, Scale = 1,]{DejaVu Sans}
\setsansfont[Ligatures = TeX, Scale = 1,]{DejaVu Sans}
\setmonofont[Mapping=tex-ansi,Scale = 1.1,]
{DejaVu Sans Mono}
\fi

\edef\latofamily{\familydefault}
\newcommand{\cmfont}{\usefont\encodingdefault
	\latofamily
	\seriesdefault
	\shapedefault
	\relax}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%	NEW FONT SIZE DEFINITIONS
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{moresize}
\newcommand		\YUGE{		\fontsize{26}{60}\selectfont}
\newcommand		\Yuge{		\fontsize{16}{38}\selectfont}
\newcommand		\Subtitle{	\fontsize{36}{38}\selectfont}
\newcommand		\subtitle{	\fontsize{22}{38}\selectfont}
\newcommand{\horrule}[1]{
	\rule{\linewidth}{#1}
} % Create horizontal rule command with 1 argument of height

% use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
% use microtype if available
\IfFileExists{microtype.sty}{%
	\usepackage[]{microtype}
	\UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts
	}{}

\usepackage[hidelinks]{hyperref}

\urlstyle{same}  % don't use monospace font for urls

\usepackage[margin=1in]{geometry}




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%	CODE FORMATTING
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{listings}
\newcommand{\passthrough}[1]{#1}
\lstset{basicstyle = , backgroundcolor = , xleftmargin = 1cm, framexleftmargin = 0em, showstringspaces = false, tabsize = 3, breaklines = true, breakatwhitespace = false, title = , captionpos = b, belowskip = -1.5 ,}
\lstset{
keywordstyle    = \bfseries\color{green!75!red},
numberstyle     = \tiny\color{black!40},
commentstyle    = \itshape\color{magenta!80},
identifierstyle = \bfseries\color{black!50},
stringstyle     = \color{green!50!black},
}





    % Make links footnotes instead of hotlinks:


\IfFileExists{parskip.sty}{%
\usepackage{parskip}
}{% else
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}
}

\setlength{\emergencystretch}{3em}  % prevent overfull lines
\providecommand{\tightlist}{%
	\setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}

\setcounter{secnumdepth}{2}



% set default figure placement to htbp
\makeatletter
\def\fps@figure{htbp}
\makeatother

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%	GRAY BACKGROUND FOR ALL CODE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{fancyvrb,newverbs}
	\definecolor{mygray}{rgb}{0.9, 0.9, 0.9}
	\definecolor{Light}{HTML}{F4F4F4}
	\let\oldtexttt\texttt
	\renewcommand{\texttt}[1]{\colorbox{mygray}{\oldtexttt{#1}}}
		
\usepackage{xpatch, realboxes}
	\makeatletter
	\xpretocmd\lstinline{\Colorbox{mygray}\bgroup\appto\lst@DeInit{\egroup}}{}{}
	\makeatother

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%	PAGE HEADERS AND FOOTERS
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{} % clear all header and footer fields
\ifdefined\authornameb
	\fancyhead[R]{\sffamily\fontsize{10pt}{11pt}\selectfont
	\textbf{\authorname{}} \color{green!75!red}\& \color{black}\textbf{\authornameb{}} }
\else
	\fancyhead[R]{\fontsize{10pt}{11pt}\textsf{\textbf{Ashar Latif}} \textsf{\color{green!75!red}}}
	\fi
	\fancyhead[L]{\sffamily\fontsize{10pt}{11pt}\selectfont
		\textbf{KPM Power:}  \color{green!75!red}Python Testing}
	\fancyfoot[C]{\sffamily\bfseries\fontsize{10pt}{12pt}\color{green!75!red}\selectfont\thepage}
	\renewcommand{\headrulewidth}{0.5pt}
	\renewcommand{\footrulewidth}{0.5pt}
	\fancypagestyle{plain}{
		\fancyhf{} % clear all header and footer fields
		\fancyfoot[C]{\sffamily\bfseries\fontsize{10pt}{12pt}\color{green!75!red}\selectfont	\thepage}
		\renewcommand{\headrulewidth}{0pt}
		\renewcommand{\footrulewidth}{0.5pt}
	}
	\fancypagestyle{title}{
		\fancyhf{}
		\fancyhead{}
		\fancyfoot{}
		\renewcommand{\headrulewidth}{0pt}
		\renewcommand{\footrulewidth}{0pt}
	}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%	SECTION AND SUBSECTION STYLES
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{titlesec}
\titleformat{\section}
	{\sffamily\LARGE\color{black}\bfseries}
	{\textbf{\color{green!75!red}\thesection}\mdseries}
	{0.85em}{}
	 [\color{black}\titlerule]
	
\titlespacing*{\section}
	{0pt}{6mm}{4mm}

\titleformat{\subsection}
	{\sffamily\Large\bfseries\color{black!70}}
	{\textbf{\color{green!75!red}\thesubsection}\mdseries}
	{0.55em}{}
\titlespacing*{\subsection}
	{0pt}{4mm}{3mm}

\titleformat{\subsubsection}
	{\sffamily\large\bfseries}
	{\textbf{\thesubsubsection}\mdseries}
	{0.70em}{}
\titlespacing*{\subsubsection}
	{0pt}{4mm}{2mm}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%	TITLE MATTER DEFINITION
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    \title{
    \begin{flushright}
        \sffamily
        \vspace*{0em}
        \noindent
        \hspace{-0.40em}\YUGE 	\bfseries	\color{green!75!red} \textbf{KPM Power} \\*[-3.9mm]
        \Yuge 		\color{black} \textbf{Anzen BMS System}   \\*[-1em]
        \color{black}		\hrule 		 	\vspace   	{10em}
    \end{flushright}
    \begin{flushleft}
        \sffamily
        \Subtitle  	\color{black} \textbf{Python Testing}		\\*[-0.3em]
                \hspace{-0.65em} \subtitle	\color{green!75!red} \text{ Frameworks and Usage} 	\\*[5em]
                        \Huge	\color{black} \text{Ashar Latif}		\\*[-0.05em]
                        \LARGE	\color{green!75!red} \text{ashar@kpmpower.com}	\\*[4em]
                        \Large		\color{green!75!red}			\today				\\*[2em]
    \end{flushleft}
%		\cmfont
    }
    \date{\vspace{1mm}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%	TABLE OF CONTENTS FORMATTING
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{tocloft}
	\renewcommand{\cfttoctitlefont}{\fontsize{26}{22}\sffamily\bfseries\color{black}}
	\renewcommand{\cftaftertoctitle}{\par\vskip-0.3em\noindent\hrulefill\par\vskip1.6em}
	\renewcommand{\cftsecfont}{\large\sffamily\bfseries\color{black}}
	\renewcommand{\cftsecpagefont}{\sffamily}
	\renewcommand{\cftsubsecfont}{\sffamily\mdseries}
	\renewcommand{\cftsubsecpagefont}{\sffamily\mdseries}
	\renewcommand{\cftsubsubsecfont}{\sffamily\mdseries}
	\renewcommand{\cftsubsubsecpagefont}{\mdseries}
	\renewcommand{\cftloftitlefont}{\fontsize{24}{22}\sffamily\bfseries\color{black}}
	\renewcommand{\cftafterloftitle}{\par\vskip-0.8em\noindent\hrulefill\par\vskip0.6em}
	\renewcommand{\cftfigfont}{\mdseries}
	\renewcommand{\cftfigpagefont}{\mdseries}
	\renewcommand{\cftlottitlefont}{\fontsize{24}{22}\sffamily\bfseries\color{black}}
	\renewcommand{\cftafterlottitle}{\par\vskip-0.8em\noindent\hrulefill\par\vskip0.6em}
	\renewcommand{\cfttabfont}{\mdseries}
	\renewcommand{\cfttabpagefont}{\mdseries}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%	BODY
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%	TITLE MATTER INVOCATION %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\thispagestyle{title}
\maketitle
\pagenumbering{roman} \vspace{-20mm}
	{
\setcounter{tocdepth}{}
\tableofcontents \vspace{15mm}
}
\thispagestyle{plain}
\cleardoublepage
\pagenumbering{arabic}
\newpage





<h1 id="setup">Setup</h1>
<h2 id="dependencies">Dependencies</h2>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>pip install pytest</span></code></pre></div>
<h2 id="config">Config</h2>
<p>Global fixtures file is called <code>conftest.py</code> and should be placed in the root of the project. All global fixtures go in this file. See <a href="#fixtures">Fixtures section</a> for more info.</p>
<p>Pytest detects test automatically if in the following formats:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>test_<span class="op">*</span>.py</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>_test.py</span></code></pre></div>
<p>This is the recommended folder format (just for organization, <code>pytest</code> will detect tests based solely on file name):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span>project <span class="ex">name</span><span class="op">&gt;</span>/</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">|</span><span class="ex">-</span> tests/</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span><span class="ex">-</span> integration/</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>      <span class="kw">|</span><span class="ex">-</span> <span class="co"># integration tests go here</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>   <span class="kw">|</span><span class="ex">-</span> unit/</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>      <span class="kw">|</span><span class="ex">-</span> <span class="co"># unit tests go here</span></span></code></pre></div>
<p>Project-level configurations can be entered into a <code>pytest.ini</code> file in the root of the project. A full list of options can be found <a href="https://docs.pytest.org/en/6.2.x/reference.html#ini-options-ref">here</a> and a sample <code>pytest.ini</code> can be found at the bottom of this file.</p>
<h1 id="running-tests">Running Tests</h1>
<p>To run all defined tests, just invoke the command:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pytest</span></span></code></pre></div>
<p>If we want to run a specific test file (lets call it <code>sample_test.py</code>), run the following command:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pytest</span> sample_test.py</span></code></pre></div>
<p>To run tests whose names contain a specific substring, invoke the following:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pytest</span> <span class="at">-k</span> <span class="op">&lt;</span>substring<span class="op">&gt;</span></span></code></pre></div>
<p>To run a specific test from a specific file, invoke the following:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pytest</span> <span class="op">&lt;</span>test_file.py<span class="op">&gt;</span>::<span class="op">&lt;</span>test_function_name<span class="op">&gt;</span></span></code></pre></div>
<p>If we want to only run tests defined with specific <strong>marks</strong>, (for example <code>mark1</code>), run the following command:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pytest</span> <span class="at">-m</span> mark1</span></code></pre></div>
<p>See <a href="#marks">Marks section</a> for more info.</p>
<h2 id="verbose-mode">Verbose Mode</h2>
<p>It is recommended to always run <code>pytest</code> in verbose mode, which can be invoked with the <code>-v</code> flag. Alternatively, you can make this option always-on by adding <code>export PYTEST_ADDOPTS="-v"</code> to your environment variables. Alternatively, you can add the following lines to <code>pytest.ini</code> (in the root of the project):</p>
<pre><code>[pytest]
addopts = -v
```https://docs.pytest.org/en/6.2.x/monkeypatch.html


# Concurrent Tests
We can run tests in parallel using `pytest`. First we need to install the dependencies by invoking:
```bash
pip install pytest-xdist</code></pre>
<p>Then, we can run multiple tests concurrently with the following command:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pytest</span> <span class="at">-n</span> <span class="op">&lt;</span>number_of_tests<span class="op">&gt;</span></span></code></pre></div>
<p>The <code>-n</code> flag is equivalent to the <code>--numprocesses</code> flag. We can also run as many parallel tests as we have CPU cores by running:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pytest</span> <span class="at">-n</span> auto</span></code></pre></div>
<p>This setting can be added into you <code>pytest.ini</code></p>
<h1 id="test-basics">Test Basics</h1>
<h2 id="simple-passing-test">Simple Passing Test</h2>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> hello_world():</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="st">&#39;hello world&#39;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_function():</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> hello_world() <span class="op">==</span> <span class="st">&#39;hello world&#39;</span></span></code></pre></div>
<h2 id="test-for-exceptions">Test for Exceptions</h2>
<div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pytest</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> hello_error():</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">raise</span> <span class="pp">NotImplementedError</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    </span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_function():</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> pytest.raises(<span class="pp">NotImplementedError</span>):</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>        hello_error()</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_context():</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> pytest.raises(<span class="pp">NotImplementedError</span>) <span class="im">as</span> e:</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>        hello_error()</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> e.xyz <span class="op">==</span> abc</span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>    <span class="co"># note that the exception context object is referenced *outside* the `with` block</span></span></code></pre></div>
<h1 id="fixtures">Fixtures</h1>
<p>Fixtures are indicated by the <code>@pytest.fixture</code> decorator. Best practice is to put these in <code>conftest.py</code> so that any test file can use it. A quick example:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co"># conftest.py</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pytest</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="at">@pytest.fixture</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> supply_AA_BB_CC():</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    aa<span class="op">=</span><span class="dv">25</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>    bb <span class="op">=</span><span class="dv">35</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>    cc<span class="op">=</span><span class="dv">45</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> [aa,bb,cc]</span></code></pre></div>
<div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co"># basic_test.py</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pytest</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_comparewithAA(supply_AA_BB_CC):</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    zz<span class="op">=</span><span class="dv">35</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> supply_AA_BB_CC[<span class="dv">0</span>]<span class="op">==</span>zz,<span class="st">&quot;aa and zz comparison failed&quot;</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_comparewithBB(supply_AA_BB_CC):</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    zz<span class="op">=</span><span class="dv">35</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> supply_AA_BB_CC[<span class="dv">1</span>]<span class="op">==</span>zz,<span class="st">&quot;bb and zz comparison failed&quot;</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_comparewithCC(supply_AA_BB_CC):</span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>    zz<span class="op">=</span><span class="dv">35</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> supply_AA_BB_CC[<span class="dv">2</span>]<span class="op">==</span>zz,<span class="st">&quot;cc and zz comparison failed&quot;</span></span></code></pre></div>
<h1 id="marks">Marks</h1>
<p>Marks are indicated with a decorator in the format:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="at">@pytest.mark.</span><span class="op">&lt;</span>mark_name<span class="op">&gt;</span></span></code></pre></div>
<p>For example, given the following test file:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pytest</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="at">@pytest.mark.set1</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_file1_method1():</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>    x<span class="op">=</span><span class="dv">5</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>    y<span class="op">=</span><span class="dv">6</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> x<span class="op">+</span><span class="dv">1</span> <span class="op">==</span> y,<span class="st">&quot;test failed&quot;</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> x <span class="op">==</span> y,<span class="st">&quot;test failed because x=&quot;</span> <span class="op">+</span> <span class="bu">str</span>(x) <span class="op">+</span> <span class="st">&quot; y=&quot;</span> <span class="op">+</span> <span class="bu">str</span>(y)</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a><span class="at">@pytest.mark.set2</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_file1_method2():</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>    x<span class="op">=</span><span class="dv">5</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>    y<span class="op">=</span><span class="dv">6</span></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> x<span class="op">+</span><span class="dv">1</span> <span class="op">==</span> y,<span class="st">&quot;test failed&quot;</span></span></code></pre></div>
<p>Running <code>py.test -m set1</code> will run only <code>test_file_method1()</code>. It doesn’t matter if marks in in separate files, all matching marks will still be run.</p>
<h2 id="special-marks">Special Marks</h2>
<p>The two most important special marks are <code>xfail</code> and <code>skip</code>. Marking a test with <code>skip</code> will make <code>pytest</code> skip that test. <code>xfail</code> is much more interesting. We use this for test that are expected to fail. For example, running the following test:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pytest</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="at">@pytest.mark.skip</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_add_1():</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> <span class="dv">100</span><span class="op">+</span><span class="dv">200</span> <span class="op">==</span> <span class="dv">400</span>,<span class="st">&quot;failed&quot;</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="at">@pytest.mark.xfail</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_add_2():</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> <span class="dv">15</span><span class="op">+</span><span class="dv">13</span> <span class="op">==</span> <span class="dv">28</span>,<span class="st">&quot;failed&quot;</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a><span class="at">@pytest.mark.xfail</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_add_3():</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> <span class="dv">15</span><span class="op">+</span><span class="dv">13</span> <span class="op">==</span> <span class="dv">100</span>,<span class="st">&quot;failed&quot;</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_add_4():</span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> <span class="dv">3</span><span class="op">+</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">6</span>,<span class="st">&quot;failed&quot;</span></span></code></pre></div>
<p>Gives the following output:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>test_addition.py::test_add_1 SKIPPED</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>test_addition.py::test_add_2 XPASS</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>test_addition.py::test_add_3 xfail</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>test_addition.py::test_add_4 FAILED</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>        </span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="op">==============================================</span> FAILURES <span class="op">==============================================</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>_____________________________________________ test_add_4 _____________________________________________</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> test_add_4():</span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span>       <span class="cf">assert</span> <span class="dv">3</span><span class="op">+</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">6</span>,<span class="st">&quot;failed&quot;</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>E    <span class="pp">AssertionError</span>: failed</span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>E    <span class="cf">assert</span> (<span class="dv">3</span> <span class="op">+</span> <span class="dv">2</span>) <span class="op">==</span> <span class="dv">6</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>test_addition.py:<span class="dv">24</span>: <span class="pp">AssertionError</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a><span class="op">================</span> <span class="dv">1</span> failed, <span class="dv">1</span> skipped, <span class="dv">1</span> xfailed, <span class="dv">1</span> xpassed <span class="kw">in</span> <span class="fl">0.07</span> seconds <span class="op">=================</span></span></code></pre></div>
<h1 id="parameterized-tests">Parameterized Tests</h1>
<p><code>pytest</code> allows us to use many arguments at once without rewriting functions. To do this you have to use the <code>@pytest.mark.parametrize</code> decorator. An example:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pytest</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a><span class="at">@pytest.mark.parametrize</span>(<span class="st">&quot;input1, input2, output&quot;</span>,[(<span class="dv">5</span>,<span class="dv">5</span>,<span class="dv">10</span>),(<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">12</span>)])</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_add(input1, input2, output):</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> input1<span class="op">+</span>input2 <span class="op">==</span> output,<span class="st">&quot;failed&quot;</span></span></code></pre></div>
<h1 id="mocking">Mocking</h1>
<p>There are a few ways of implementing mocks with <code>pytest</code>. This document will cover 2 ways: <code>pytest-mock</code> and <code>monkeypatch</code>. They have non-overlapping domains so there are certain situations where one will be preferred over the other. In general, either is acceptable to use. Some examples of comparative usage are in <a href="https://semaphoreci.com/community/tutorials/mocks-and-monkeypatching-in-python">this article</a></p>
<h2 id="pytest-mock"><code>pytest-mock</code></h2>
<p>This requires <code>pytest-mock</code> to be installed, which can be done with the following command:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install pytest-mock</span></code></pre></div>
<h3 id="variables">Variables</h3>
<p>Variable mocking is mainly used for mocking globals (outside of function scope). Say you have the following file that contains a Lambda handler:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="co"># lambda_handler.py</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>is_cold_start <span class="op">=</span> <span class="va">True</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> handler():</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> is_cold_start:</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>        <span class="co"># do stuff</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a>        is_cold_start <span class="op">=</span> <span class="va">False</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>    <span class="co"># do more stuff</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="va">True</span>  <span class="co"># arbitrary return value for illustration</span></span></code></pre></div>
<p>You want to be able to test <code>handler()</code> when <code>is_cold_start = False</code>; to do so, you must mock <code>is_cold_start</code>.</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="co"># handler_test.py</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pytest</span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> lambda_handler</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_handler(mocker):</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>    mocker.patch.<span class="bu">object</span>(lambda_handler, <span class="st">&#39;is_cold_start&#39;</span>, <span class="va">False</span>)</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> handler()</span></code></pre></div>
<p>The signature is as follows:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a>mocker.patch.<span class="bu">object</span>(</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>    module,      <span class="co"># this is NOT a string</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&#39;variable&#39;</span>,  <span class="co"># this IS a string</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>    value        <span class="co"># this is whatever</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>The module name follows the import name. For example, if <code>lambda_handler.py</code> were in a folder <code>src/</code>, the module would then be <code>src.lambda_handler</code>.</p>
<h3 id="functions">Functions</h3>
<p>For the following file:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co"># hello_world.py</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> say_passphrase():</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>    passphrase <span class="op">=</span> os.environ.get(<span class="st">&#39;PASSPHRASE&#39;</span>)</span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> passphrase <span class="kw">or</span> <span class="st">&#39;I need somebody (Help!)&#39;</span></span></code></pre></div>
<p>We can mock the <code>os.environ.get()</code> call by using the fully qualified method name like so:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="co"># hello_world_test.py</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pytest</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> hello_world <span class="im">import</span> say_passphrase</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> test_passphrase(mocker):</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>    mocker.patch(<span class="st">&#39;hello_world.os.environ.get&#39;</span>, return_value<span class="op">=</span><span class="st">&#39;hello world&#39;</span>)</span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> say_passphrase() <span class="op">==</span> <span class="st">&#39;hello world&#39;</span></span></code></pre></div>
<h2 id="monkeypatch"><code>monkeypatch</code></h2>
<p>This is native to <code>pytest</code> so has no further dependencies. More info on <code>monkeypatch</code> can be found <a href="https://docs.pytest.org/en/6.2.x/monkeypatch.html">here</a>, and a general tutorial on its functionality is <a href="https://codefellows.github.io/sea-python-401d7/lectures/mock.html">here</a></p>
<h1 id="test-coverage">Test Coverage</h1>
<p>We will be using the <code>coverage</code> library to check for test coverage. To install, invoke the following:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>pip install coverage</span></code></pre></div>
<p>To test for coverage, invoke the following:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pytest</span> <span class="at">--cov</span><span class="op">=</span>myproj tests/</span></code></pre></div>
<h1 id="sample-pytest.ini">Sample <code>pytest.ini</code></h1>
<p>This <code>pytest.ini</code> will always have verbose output and will run as many parallel tests as there are CPU cores on the host device. The full list of command line flags can be found <a href="https://docs.pytest.org/en/6.2.x/reference.html#id91">here</a>.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="ex">[pytest]</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a><span class="ex">addopts</span> = <span class="at">-v</span> <span class="at">--numprocesses</span> auto</span></code></pre></div>


\end{document}
